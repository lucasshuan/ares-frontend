generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

enum MatchStatus {
  ACCEPTED
  REJECTED
  PENDING_VERIFICATION
  IN_PROGRESS
  SCHEDULED
}

enum MediaType {
  YOUTUBE
  TWITCH
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Log {
  id      Int    @id @default(autoincrement())
  message String
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  emailVerified DateTime?
  country       String
  image         String?
  biography     String?
  anonymous     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  accounts          Account[]
  sessions          Session[]
  following         User[]            @relation("UserFollows")
  followers         User[]            @relation("UserFollows")
  tourneysOrganized Tourney[]
  matchesCreated    Match[]
  participations    Participation[]
  clanMemberships   ClanMember[]
  clansOwned        Clan[]
  tourneyRosters    TourneyRoster[]
  clanApplications  ClanApplication[]
  clanInvites       ClanInvite[]
  userPermissions   UserPermission[]
  matchMedias       MatchMedia[]
}

model Permission {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userPermissions UserPermission[]
}

model UserPermission {
  id           Int      @id @default(autoincrement())
  userId       Int
  permissionId Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
}

model RegisteredUsername {
  id        String   @id @default(cuid())
  gameId    Int
  username  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([username, gameId])
}

model Game {
  id                 Int      @id @default(autoincrement())
  name               String   @unique
  description        String?
  officialWebsiteUrl String?
  steamUrl           String?
  thumbnailUrl       String?
  logoUrl            String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt

  matches             Match[]
  registeredUsernames RegisteredUsername[]
}

model Match {
  id              Int         @id @default(autoincrement())
  creatorId       Int
  gameId          Int
  tourneyId       Int?
  winnerId        Int         @unique
  loserId         Int         @unique
  status          MatchStatus @default(ACCEPTED)
  description     String?
  screenshotUrl   String?
  youtubeVideoUrl String?
  twitchVodUrl    String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt

  creator    User     @relation(fields: [creatorId], references: [id])
  game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  tourney    Tourney? @relation(fields: [tourneyId], references: [id])
  winnerSide Side     @relation("WinnerSide", fields: [winnerId], references: [id])
  loserSide  Side     @relation("LoserSide", fields: [loserId], references: [id])
}

model MatchMedia {
  id        Int       @id @default(autoincrement())
  authorId  Int
  url       String
  type      MediaType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  author User @relation(fields: [authorId], references: [id])
}

model Side {
  id        Int      @id @default(autoincrement())
  matchId   String
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  participations Participation[]
  matchWon       Match?          @relation("WinnerSide")
  matchLost      Match?          @relation("LoserSide")
}

model Participation {
  id        Int      @id @default(autoincrement())
  sideId    Int
  userId    Int
  info      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  side Side @relation(fields: [sideId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sideId, userId])
}

model Clan {
  id          Int      @id @default(autoincrement())
  ownerId     Int
  name        String
  description String?
  logoUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  members      ClanMember[]
  applications ClanApplication[]
  invites      ClanInvite[]
}

model ClanMember {
  id        Int      @id @default(autoincrement())
  clanId    Int
  userId    Int
  label     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  clan Clan @relation(fields: [clanId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([clanId, userId])
}

model ClanInvite {
  id        Int      @id @default(autoincrement())
  clanId    Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  clan Clan @relation(fields: [clanId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([clanId, userId])
}

model ClanApplication {
  id        Int      @id @default(autoincrement())
  clanId    Int
  userId    Int
  plead     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  clan Clan @relation(fields: [clanId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([clanId, userId])
}

model Tourney {
  id          Int      @id @default(autoincrement())
  organizerId Int
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  organizer User @relation(fields: [organizerId], references: [id])

  rosters TourneyRoster[]
  matches Match[]
}

model TourneyRoster {
  id        Int      @id @default(autoincrement())
  tourneyId Int
  name      String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  tourney Tourney @relation(fields: [tourneyId], references: [id])

  users User[]

  @@unique([tourneyId, name])
}
